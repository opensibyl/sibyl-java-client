/*
 * openapi for sibyl2 server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.opensibyl.client.model;

import com.github.opensibyl.client.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * ServiceRevStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-21T00:23:35.240+08:00[Asia/Shanghai]")
public class ServiceRevStat {
  public static final String SERIALIZED_NAME_FILE_COUNT = "fileCount";
  @SerializedName(SERIALIZED_NAME_FILE_COUNT)
  private Integer fileCount;

  public static final String SERIALIZED_NAME_FUNCTION_COUNT = "functionCount";
  @SerializedName(SERIALIZED_NAME_FUNCTION_COUNT)
  private Integer functionCount;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private ObjectRevInfo info;

  public ServiceRevStat() {
  }

  public ServiceRevStat fileCount(Integer fileCount) {
    
    this.fileCount = fileCount;
    return this;
  }

   /**
   * Get fileCount
   * @return fileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFileCount() {
    return fileCount;
  }


  public void setFileCount(Integer fileCount) {
    this.fileCount = fileCount;
  }


  public ServiceRevStat functionCount(Integer functionCount) {
    
    this.functionCount = functionCount;
    return this;
  }

   /**
   * Get functionCount
   * @return functionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFunctionCount() {
    return functionCount;
  }


  public void setFunctionCount(Integer functionCount) {
    this.functionCount = functionCount;
  }


  public ServiceRevStat info(ObjectRevInfo info) {
    
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectRevInfo getInfo() {
    return info;
  }


  public void setInfo(ObjectRevInfo info) {
    this.info = info;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceRevStat serviceRevStat = (ServiceRevStat) o;
    return Objects.equals(this.fileCount, serviceRevStat.fileCount) &&
        Objects.equals(this.functionCount, serviceRevStat.functionCount) &&
        Objects.equals(this.info, serviceRevStat.info);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileCount, functionCount, info);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceRevStat {\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    functionCount: ").append(toIndentedString(functionCount)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileCount");
    openapiFields.add("functionCount");
    openapiFields.add("info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServiceRevStat
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ServiceRevStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceRevStat is not found in the empty JSON string", ServiceRevStat.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ServiceRevStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceRevStat` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        ObjectRevInfo.validateJsonObject(jsonObj.getAsJsonObject("info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceRevStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceRevStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceRevStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceRevStat.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceRevStat>() {
           @Override
           public void write(JsonWriter out, ServiceRevStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceRevStat read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServiceRevStat given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServiceRevStat
  * @throws IOException if the JSON string is invalid with respect to ServiceRevStat
  */
  public static ServiceRevStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceRevStat.class);
  }

 /**
  * Convert an instance of ServiceRevStat to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

